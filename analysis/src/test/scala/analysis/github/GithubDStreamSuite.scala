package hiregooddevs.analysis.github

import org.scalatest.concurrent.Eventually
import org.scalatest.Matchers._
import org.scalatest.{BeforeAndAfter, WordSpec}

class GithubDStreamSuite extends WordSpec {

  "GithubDStreamSuite" can {

    "filter with GitHub API" should {
      "ignore too young repos" in { assert(false) }
      "allow only repos with commits primary made by the user" in {
        assert(false)
      }
      "return users' emails in the order of activity (the first is most active)" in {
        assert(false)
      }
      "ignore fake and autogenerated emails" in {
        assert(false)
      }
    }

    "transform data for static analysis" should {
      "return files and lines changed by the user only" in {
        assert(false)
      }
    }

    // TODO: separate module?
    "static analysis" should {
      "run on the same machine as git" in { assert(false) }
      "only analyze the code changed by the user" in { assert(false) }
      "return bad grades when code is bad" in { assert(false) }
      "return good grades when code is good" in { assert(false) }
      "return code coverage grade" in { assert(false) }
      //"return all known grade types" in { assert(false) } // TODO: do we really need it?
      //"use non-zero grades only to compute total grade" in { assert(false) } // TODO: zero means user don't use technology; maybe just don't do tags with zero?
      "only contain tags with languages and technologies that user applies" in {
        assert(false)
      }
      "ignore code that can't compile" in { assert(false) } // it can fail because of dependencies we don't have
      "ignore users with too low total grade" in { assert(false) }
    }

  }

}
