package hiregooddevs.analysis.github

import org.scalatest.concurrent.Eventually
import org.scalatest.Matchers._
import org.scalatest.{BeforeAndAfter, WordSpec}

class GithubDStreamSuite extends WordSpec {

//  var fixture: Option[Fixture] = None
//
//  before {
//    fixture = {
//      val f = new Fixture
//      // TODO: githubMapReduce? githubFilter?
//      Some(f)
//    }
//  }
//
//  after {
//    fixture.foreach { f =>
//      fixture = None
//    }
//  }

  "GithubDStreamSuite" can {

    "filter GitHub API output" should {
      "ignore users with invalid type (e.g. organization)" in {
        assert(fixture.isUser("target-user"))
        assert(!fixture.isUser("not-user"))
      }
      "ignore too young repos" in {
        assert(fixture.isOld("target-user", "old-repo"))
        assert(!fixture.isOld("target-user", "young-repo"))
      }
      "allow only repos with commits mostly made by the user" in {
        assert(fixture.hasMostlyCommitsByOwner("target-user", "repo-with-mostly-commits-by-owner"))
        assert(!fixture.hasMostlyCommitsByOwner("target-user", "repo-with-mostly-commits-by-others"))
      }
      "ignore repos user doesn't own" in {
        assert(fixture.isOwnedByUser("target-user", "repo-by-owner"))
        assert(!fixture.isOwnedByUser("target-user", "repo-by-others"))
      }
      "ignore repos with primary language we don't support" in {
        assert(fixture.isSupported("target-user", "repo-with-javascript-as-primary"))
        assert(!fixture.isSupported("target-user", "repo-with-unknown-as-primary"))
      }
      "returns pinned repos as priority" in {
        assert(
          fixture.reposOf("target-user").toSeq === Seq("repo-pinned1",
                                                       "repo-pinned2",
                                                       "repo-by-owner",
                                                       "repo-with-javascript-as-primary"))
      }
      //"ignore users with too little number of target repositories" in { assert(false) }
      "limit number of target repositories" in {
        fixture.reposOf("target-user").length assertEquals 6
      }
      "ignore fake and autogenerated emails" in {
        assert(fixture.emailOf("target-user") === Some("valid-mail@domain.com"))
        assert(fixture.emailOf("user-with-bad-email") === None)
      }
    }

    // TODO: separate module?
    "fetch additional info" should {
      "detect services used" in {
        assert(
          fixture.servicesOf("alopatindev", "qdevicemonitor") === Seq("travis-ci.org", "appveyor.com")
          fixture.servicesOf("alopatindev", "find-telegram-bot") === Seq(
            "travis-ci.org",
            "codecov.io",
            "codeclimate.com",
            "semaphoreci.com",
            "bithound.io",
            "versioneye.com",
            "david-dm.org",
            "dependencyci.com",
            "snyk.io",
            "npmjs.com"
          ))
      }
    }

    // TODO: separate module per language?
    "external containerized program" should {
      "download repo" in {
        fixture.downloadRepo("alopatindev", "find-telegram-bot")
        eventually(timeout(1 second)) {
          assert(fixture.fileExists("/tmp/hiregooddevs-analyzer/alopatindev/find-telegram-bot/.gitignore"))
        }
      }
      "detect dependencies" in {
        fixture.downloadRepo("alopatindev", "find-telegram-bot")
        eventually(timeout(1 second)) {
          assert(fixture.rawDependenciesOf("alopatindev", "find-telegram-bot") === Seq("phantom", "telegraf", "winston", "bithound", "codecov", "eslint", "eslint-plugin-better", "eslint-plugin-mocha", "eslint-plugin-private-props", "eslint-plugin-promise", "istanbul", "mocha", "mocha-logger", "nodemon"))
        }
      }
      "rename dependencies and ignore aliases" in {
        assert(fixture.dependenciesOf("alopatindev", "find-telegram-bot") contains "PhantomJS")
        assert(!(fixture.dependenciesOf("alopatindev", "find-telegram-bot") contains "phantomjs"))
      }
      "cleanup temporary files when done" in {
        fixture.cleanup("alopatindev", "find-telegram-bot")
        eventually(timeout(1 second)) {
          assert(!fixture.fileExists("/tmp/hiregooddevs-analyzer/alopatindev/find-telegram-bot/.gitignore"))
        }
      }
    }

    // TODO: separate module?
    "static analysis" should {
      "apply analysis of supported languages used in the repo" in { assert(false) }
      "run on the same machine and container as wget" in { assert(false) }
      "return bad grades when code is bad" in { assert(false) }
      "return good grades when code is good" in { assert(false) }
      //"return code coverage grade" in { assert(false) }
      "return all supported grade types" in { assert(false) }
      //"ignore code that can't compile" in { assert(false) } // it can fail because of dependencies we don't have
      "ignore users with too low total grade" in { assert(false) }
    }

  }

}
